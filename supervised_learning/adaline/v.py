# -*- coding: utf-8 -*-

import random
from collections import OrderedDict

# V
X_P = {
        1: [
            +1, -1, -1, -1, +1,
            +1, -1, -1, -1, +1,
            -1, +1, -1, +1, -1,
            -1, +1, -1, +1, -1,
            -1, -1, +1, -1, -1,
            ]
        ,
        2: [
                +1, -1, -1, -1, +1,
                +1, -1, -1, -1, +1,
                +1, -1, -1, -1, +1,
                -1, +1, -1, +1, -1,
                -1, -1, +1, -1, -1,
            ]
        ,
        3: [
                +1, -1, -1, -1, +1,
                +1, -1, -1, -1, +1,
                -1, +1, -1, -1, +1,
                -1, +1, -1, +1, -1,
                -1, -1, +1, -1, -1,
            ]
        ,
        4: [
                +1,	-1,	-1,	-1,	+1,
                -1,	+1,	-1,	+1,	-1,
                -1,	+1,	-1,	+1,	-1,
                -1,	+1,	-1,	+1,	-1,
                -1,	-1,	+1,	-1,	-1,
            ]
        ,
        5: [
                +1,	-1,	-1,	-1,	+1,
                -1,	+1,	-1,	-1,	+1,
                +1,	-1,	-1,	+1,	-1,
                -1,	+1,	-1,	+1,	-1,
                -1,	-1,	+1,	-1,	-1,
            ]
        ,
        6: [
                +1,	-1,	-1,	-1,	+1,
                +1,	-1,	-1,	-1,	+1,
                +1,	-1,	-1,	+1,	-1,
                -1,	+1,	+1,	-1,	-1,
                -1,	-1,	+1,	-1,	-1,
            ]
        ,
        7: [
                +1,	-1,	-1,	-1,	+1,
                -1,	+1,	-1,	-1,	+1,
                -1,	+1,	-1,	-1,	+1,
                -1,	+1,	-1,	+1,	-1,
                -1,	+1,	+1,	-1,	-1,
            ]
        ,
        8: [
                +1,	-1,	-1,	-1,	+1,
                -1,	+1,	-1,	-1,	-1,
                +1,	-1,	-1,	-1,	+1,
                -1,	+1,	-1,	+1,	-1,
                -1,	-1,	+1,	-1,	-1,
            ]
        ,
        9: [
                +1,	-1,	-1,	-1,	+1,
                +1,	-1,	-1,	-1,	+1,
                -1,	+1,	-1,	+1,	-1,
                -1,	+1,	+1,	+1,	-1,
                -1,	-1,	+1,	-1,	-1,
            ]
    }

# Î›
X_N = {
        -1: [
                -1, -1, +1, -1, -1,
                -1, +1, -1, +1, -1,
                -1, +1, -1, +1, -1,
                +1, -1, -1, -1, +1,
                +1, -1, -1, -1, +1,
            ]
        ,
        -2: [
                -1, -1, +1, -1, -1,
                -1, +1, -1, +1, -1,
                -1, +1, -1, -1, +1,
                +1, -1, -1, -1, +1,
                +1, -1, -1, -1, +1,
            ]
        ,
        -3: [
                -1, -1, +1, -1, -1,
                -1, +1, -1, +1, -1,
                -1, +1, -1, +1, -1,
                -1, +1, -1, +1, -1,
                +1, -1, -1, -1, +1,
            ]
        ,
        -4: [
                -1,	+1,	+1,	-1,	-1,
                -1,	+1,	-1,	+1,	-1,
                +1,	-1,	-1,	+1,	-1,
                +1,	-1,	-1,	-1,	+1,
                +1,	-1,	-1,	-1,	+1,
            ]
        ,
        -5: [
                -1,	-1,	+1,	-1,	-1,
                -1,	+1,	-1,	+1,	-1,
                +1,	-1,	-1,	-1,	+1,
                +1,	-1,	-1,	-1,	+1,
                +1,	-1,	-1,	-1,	+1,
            ]
        ,
        -6: [
                -1,	-1,	+1,	-1,	-1,
                -1,	+1,	+1,	-1,	-1,
                +1,	-1,	-1,	+1,	-1,
                +1,	-1,	-1,	-1,	+1,
                +1,	-1,	-1,	-1,	+1,
            ]
        ,
        -7: [
                -1,	+1,	+1,	+1,	-1,
                -1,	+1,	-1,	+1,	-1,
                +1,	-1,	-1,	-1,	+1,
                +1,	-1,	-1,	-1,	+1,
                +1,	-1,	-1,	-1,	+1,
            ]
        ,
        -8: [
                -1,	-1,	+1,	-1,	-1,
                -1,	+1,	-1,	+1,	-1,
                -1,	+1,	-1,	+1,	-1,
                +1,	+1,	-1,	+1,	+1,
                +1,	-1,	-1,	-1,	+1,
            ]
        ,
        -9: [
                -1,	-1,	+1,	-1,	-1,
                -1,	+1,	+1,	+1,	-1,
                -1,	+1,	-1,	+1,	-1,
                +1,	-1,	-1,	-1,	+1,
                +1,	-1,	-1,	-1,	+1,
            ]
    }

T = []

W_DEFAULT = [
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, 0,
]

W = [
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
    ]

N = 0.5

def sgn(value):
    return 1 if value > 0 else -1

def shuffle(x):
    keys = x.keys()
    random.shuffle(keys)

    d = OrderedDict()
    for key in keys:
        d[key] = x[key]

    return d

def get_corpus(x_p, x_n):
    # 0 ~ 3 => test
    # 3 ~ 9 => train
    train_p, test_p = shuffle(x_p).items()[3:], shuffle(x_p).items()[:3]
    train_n, test_n = shuffle(x_n).items()[3:], shuffle(x_n).items()[:3]

    return OrderedDict(shuffle(dict(train_p + train_n))), OrderedDict(shuffle(dict(test_p + test_n)))

def solve(data):
    i = 1
    while True:
        print "Cycle %s ----------------------------------" % i
        t = learn(data)
        i +=1
        if T == t:
            print "W = %s" % W
            break

def learn(data):
    r = []

    for i in range(0, len(data)):
        x = data[i]

        s = 0
        for j in range(0, len(x)):
            s = sgn(W[j] * x[j])
        r.append(s)

        if s == T[i]:
            print "... ok"
        else:
            for k in range(1, len(W)):
                w = W[k] + N * (T[i] - s) * x[k]
                W[k] = w
            print "... err => new W%s " % W
    return r

if __name__ == '__main__':

    for i in range(0, 5):

        print "\n\nEPOCH %s ********************************\n" % (i + 1)
        train, test = get_corpus(X_P, X_N)

        print "TRAINING --------------------------------"
        T = [ sgn(t) for t in train.keys() ]
        print "T for training => %s" % T
        solve(train.values())

        print "TESTING --------------------------------"
        T = [sgn(t) for t in test.keys()]
        print "T for testing => %s" % T
        solve(test.values())

        W = list(W_DEFAULT)